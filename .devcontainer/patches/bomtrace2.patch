diff --git a/src/execve.c b/src/execve.c
index a9224543b..cef02cedd 100644
--- a/src/execve.c
+++ b/src/execve.c
@@ -14,6 +14,735 @@
 
 #include "defs.h"
 
+extern struct bomsh_configs {
+	char *hook_script_file;
+	char *hook_script_cmdopt;
+	char *shell_cmd_file;
+	char *logfile;
+	char *syscalls;
+	// by default, we check prog R_OK|X_OK permission before recording a command.
+	// the below flag will turn off/on this permission check
+	int skip_checking_prog_access;
+	// By default, we support non-standard install location of tools, for gcc/clang/ld/patch, etc.
+	// The below flag turn on strict (or exact) prog path check/comparison,
+	// which disables support of non-standard install location of tools.
+	int strict_prog_path;
+} g_bomsh_config;
+
+extern int bomsh_verbose;
+extern int bomsh_detach_on_pid;
+extern int bomsh_is_pre_exec_program(char *prog);
+extern int bomsh_is_watched_program(char *prog);
+extern int bomsh_is_detach_on_pid_program(char *prog);
+extern pid_t *bomsh_umbrella_pid_stack;
+extern int bomsh_umbrella_pid_top;
+extern int bomsh_is_umbrella_program(char *prog);
+extern void bomsh_hook_program(int pid, int pre_exec_mode, const char *suffix);
+
+// we only support the basic form of "cat a.patch | patch -p1" command with pipes.
+// only one single cat-file without any option is supported for the cat command.
+static char *bomsh_cat_argv = NULL;  // the argv_str of the cat command with output pipe
+static char *bomsh_cat_pipe = NULL;  // the output pipe file of the cat command
+static pid_t bomsh_patch_pid = 0;    // the pid of the patch process with input pipe
+static char *bomsh_patch_pipe = NULL;  // the input pipe file of the patch command
+static char *bomsh_save_patch_cmd = NULL;  // the cmd_data of the patch process with input pipe
+static int bomsh_pipe_disabled = 0;  // flag to disable the bomsh pipe support
+
+// calculate the string length of the space-character separated argv array.
+// the calculated length includes the ending NULL character.
+static int get_argv_length(char **argv)
+{
+        int i = 0; int len = 0; char *p = argv[i];
+        while(p) {
+                len += strlen(p) + 1;
+                i++;
+                p = argv[i];
+        }
+        return len;
+}
+
+// copy out argv array and put the space concatenated string into a malloc'ed buf.
+// caller of this copy_argv function needs to free the malloc'ed memory.
+static char * copy_argv(char **argv)
+{
+        int i = 0; int len = 0; char *p = argv[i];
+        char *buf = NULL;
+        buf = malloc(get_argv_length(argv));
+        if (!buf) { return buf; }
+        while(p) {
+                strcpy(buf + len, p);
+                len += strlen(p) + 1;
+                buf[len - 1] = ' ';  // use space character as the separator
+                i++;
+                p = argv[i];
+        }
+        if (len > 0) {
+		buf[len - 1] = 0;
+	}
+        return buf;
+}
+
+// Get number of argv in tracee's argv array
+static unsigned int
+get_argc(struct tcb *const tcp, kernel_ulong_t addr)
+{
+	if (!addr)
+		return 0;
+
+	const unsigned int wordsize = current_wordsize;
+	kernel_ulong_t prev_addr = 0;
+	unsigned int n;
+
+	for (n = 0; addr > prev_addr; prev_addr = addr, addr += wordsize, ++n) {
+		kernel_ulong_t word = 0;
+		if (umoven(tcp, addr, wordsize, &word)) {
+			if (n == 0)
+				return 0;
+
+			addr = 0;
+			break;
+		}
+		if (word == 0)
+			break;
+	}
+	return n;
+}
+
+/*
+ * Copy string specified by address `addr' and length `len'.
+ * If `user_style' has QUOTE_0_TERMINATED bit set, treat the string
+ * as a NUL-terminated string.
+ * Pass `user_style' on to `string_quote'.
+ * Append `...' to the output if either the string length exceeds `max_strlen',
+ * or QUOTE_0_TERMINATED bit is set and the string length exceeds `len'.
+ *
+ * Returns the result of umovenstr if style has QUOTE_0_TERMINATED,
+ * or the result of umoven otherwise.
+ */
+// copied and modified the code of printstr_ex() function
+static char *
+copystr_ex2(struct tcb *const tcp, const kernel_ulong_t addr,
+	    const kernel_ulong_t len, const unsigned int user_style)
+{
+	static char *str;
+	//static char *outstr;
+
+	unsigned int size;
+	unsigned int style = user_style;
+	int rc;
+
+	if (!addr) {
+		return NULL;
+	}
+	/* Allocate static buffers if they are not allocated yet. */
+	if (!str) {
+		str = xmalloc(max_strlen + 1);
+	}
+
+	/* Fetch one byte more because string_quote may look one byte ahead. */
+	size = max_strlen + 1;
+
+	if (size > len)
+		size = len;
+	if (style & QUOTE_0_TERMINATED)
+		rc = umovestr(tcp, addr, size, str);
+	else
+		rc = umoven(tcp, addr, size, str);
+
+	if (rc < 0) {
+		return NULL;
+	}
+	// May need to quote_string for some commands
+	return(strdup(str));
+}
+
+static inline char *
+copy_single_str(struct tcb *const tcp, kernel_ulong_t addr)
+{
+        return copystr_ex2(tcp, addr, -1, QUOTE_0_TERMINATED);
+}
+
+// Copy the array of char * pointers in argv array in tracee process.
+// the new argv array in tracer's process is allocated and needs to be freed after use.
+static char *
+copy_argv_array(struct tcb *const tcp, kernel_ulong_t addr)
+{
+	if (!addr) {
+		return NULL;
+	}
+
+	const unsigned int wordsize = current_wordsize;
+	kernel_ulong_t prev_addr = 0;
+	unsigned int n = 0;
+
+	unsigned int argc = get_argc(tcp, addr);
+	char **array = (char **)xmalloc( (argc+1) * sizeof(char *));
+
+	for (;; prev_addr = addr, addr += wordsize, ++n) {
+		union {
+			unsigned int w32;
+			kernel_ulong_t wl;
+			char data[sizeof(kernel_ulong_t)];
+		} cp;
+
+		if (addr < prev_addr || umoven(tcp, addr, wordsize, cp.data)) {
+			if (n == 0) {
+				return NULL;
+			}
+			break;
+		}
+
+		const kernel_ulong_t word = (wordsize == sizeof(cp.w32))
+					    ? (kernel_ulong_t) cp.w32 : cp.wl;
+		if (word == 0)
+			break;
+
+		array[n] = copy_single_str(tcp, word);
+	}
+        array[argc] = NULL;
+
+	char *argv_str = copy_argv(array);
+	for (n=0; n<argc; n++) {
+		free(array[n]);
+	}
+	free(array);
+
+	return argv_str;
+}
+
+char *copy_path(struct tcb *const tcp, const kernel_ulong_t addr);
+
+// copy the program path in tracee's process
+char *
+copy_path(struct tcb *const tcp, const kernel_ulong_t addr)
+{
+	char path[PATH_MAX];
+	int nul_seen;
+	unsigned int n = PATH_MAX - 1;
+
+	if (!addr) {
+		return NULL;
+	}
+
+	/* Fetch one byte more to find out whether path length > n. */
+	nul_seen = umovestr(tcp, addr, n + 1, path);
+	if (nul_seen < 0)
+		return NULL;
+	else {
+		path[n++] = !nul_seen;
+	}
+
+	return strdup(path);
+}
+
+void bomsh_write_file(const char *filepath, const char *data, const char *mode);
+
+// write some data to a file
+void bomsh_write_file(const char *filepath, const char *data, const char *mode)
+{
+        FILE *fp = fopen(filepath, mode);
+        if (fp != NULL) {
+                fputs(data, fp);
+                fclose(fp);
+        }
+}
+
+// log some info for a command, this is for cat/patch command with pipes
+static void
+bomsh_log_cmd(int pid, const char *pwd_line, const char *argv_str, const char *pipe_file, const char *cmd_summary)
+{
+        if (g_bomsh_config.logfile) {
+		char pid_str[128];  // 30 cmd_summary + 28 pipe + 25 pid = 83, so 128 should be good
+		sprintf(pid_str, "\n\n%s %s\npid: %d\n", cmd_summary, pipe_file, pid);
+	        bomsh_write_file(g_bomsh_config.logfile, pid_str, "a");
+	        bomsh_write_file(g_bomsh_config.logfile, pwd_line, "a");
+	        bomsh_write_file(g_bomsh_config.logfile, "\n", "a");
+		bomsh_write_file(g_bomsh_config.logfile, argv_str, "a");
+	}
+}
+
+char * bomsh_get_rootdir(struct tcb *tcp);
+
+// get root directory for a traced process.
+char * bomsh_get_rootdir(struct tcb *tcp)
+{
+	char cwd_file[32] = "";
+	static char bomsh_rootdir[PATH_MAX] = "";
+	sprintf(cwd_file, "/proc/%d/root", tcp->pid);
+	int bytes = readlink(cwd_file, bomsh_rootdir, PATH_MAX);
+	if (bytes == -1) {
+		return NULL;
+	}
+	bomsh_rootdir[bytes] = 0;
+	return strdup(bomsh_rootdir);
+}
+
+char * bomsh_get_pwd(struct tcb *tcp);
+
+// get current working directory for a traced process.
+char * bomsh_get_pwd(struct tcb *tcp)
+{
+	char cwd_file[32] = "";
+	static char bomsh_pwddir[PATH_MAX] = "";
+	sprintf(cwd_file, "/proc/%d/cwd", tcp->pid);
+	int bytes = readlink(cwd_file, bomsh_pwddir, PATH_MAX);
+	if (bytes == -1) {
+		return NULL;
+	}
+	bomsh_pwddir[bytes] = 0;
+	return strdup(bomsh_pwddir);
+}
+
+// get fd0/stdin file for a traced process (usually patch).
+static char * bomsh_get_stdin_file(struct tcb *tcp)
+{
+	char cwd_file[32] = "";
+	static char bomsh_stdin_file[PATH_MAX] = "";
+	sprintf(cwd_file, "/proc/%d/fd/0", tcp->pid);
+	int bytes = readlink(cwd_file, bomsh_stdin_file, PATH_MAX);
+	if (bytes == -1) {
+	       return NULL;
+	}
+	bomsh_stdin_file[bytes] = 0;
+	if (strncmp(bomsh_stdin_file, "/dev/", 5) == 0 ||
+		(bomsh_pipe_disabled && strncmp(bomsh_stdin_file, "pipe:[", 6) == 0)) {
+		return NULL;
+	}
+	return strdup(bomsh_stdin_file);
+}
+
+// get fd1/stdout file for a traced process (usually cat).
+static char * bomsh_get_stdout_file(struct tcb *tcp)
+{
+	char cwd_file[32] = "";
+	static char bomsh_stdout_file[PATH_MAX] = "";
+	sprintf(cwd_file, "/proc/%d/fd/1", tcp->pid);
+	int bytes = readlink(cwd_file, bomsh_stdout_file, PATH_MAX);
+	if (bytes == -1) {
+	       return NULL;
+	}
+	bomsh_stdout_file[bytes] = 0;
+	if (strncmp(bomsh_stdout_file, "/dev/", 5) == 0) {
+		return NULL;
+	}
+	return strdup(bomsh_stdout_file);
+}
+
+// Get the cat-file from "cat abc.patch" command
+static char * bomsh_get_cat_file(char *cat_argv, char *pwd_line)
+{
+	char *p = strchr(cat_argv, ' ');
+	if (!p) {
+		return NULL;
+	}
+	if (strchr(p+1, ' ')) {
+		// there should be only one file and no space character in the file path.
+		// also there should be no any command line option.
+		return NULL;
+	}
+	if (*(p+1) == '/') {
+		// absolute path, return directly
+		return strdup(p+1);
+	}
+	// Do we really need to concatenat with pwd_line? With pipes, the patch cmd should always have the same pwd as the cat cmd, right?
+	// If so, then we can always return strdup(p+1) no matter it is absolute path or relative path.
+	// relative path, need to concatenate with pwd_line
+	int pwd_len = strlen(pwd_line);
+	int file_len = pwd_len + 2 + strlen(p);
+	char *cat_file = malloc(file_len);
+	if (!cat_file) {
+		return NULL;
+	}
+	strcpy(cat_file, pwd_line);
+	cat_file[pwd_len] = '/';
+	strcpy(cat_file + pwd_len + 1, p+1);
+	cat_file[file_len - 1] = 0;
+	return cat_file;
+}
+
+int bomsh_check_file_permission(char *path, char *pwd, char *root, int amode);
+
+// Check the access permission of a file
+// return 1 for success, and 0 for failure
+int bomsh_check_file_permission(char *path, char *pwd, char *root, int amode)
+{
+	// Convert to absolute path if necessary, taking into account pwd and root
+	char *abs_path = path;
+	int strlen_root = strlen(root);
+	if (path[0] != '/') {
+		if ((strlen_root == 1 && root[0] == '/') || strncmp(pwd, root, strlen_root) == 0) {
+			// root dir is "/", or pwd already starts with root dir
+			abs_path = malloc(strlen(pwd) + strlen(path) + 2);
+			if (!abs_path) {
+				return 0;
+			}
+			abs_path[0] = 0;
+		} else {  // root dir is not "/", and pwd does not start with root dir
+			abs_path = malloc(strlen_root + strlen(pwd) + strlen(path) + 2);
+			if (!abs_path) {
+				return 0;
+			}
+			strcpy(abs_path, root);
+		}
+		strcat(abs_path, pwd);
+		strcat(abs_path, "/");
+		strcat(abs_path, path);
+	} else {
+		if (strncmp(path, root, strlen_root) != 0) {
+			// path does not start with root dir
+			abs_path = malloc(strlen_root + strlen(path) + 2);
+			if (!abs_path) {
+				return 0;
+			}
+			strcpy(abs_path, root);
+			strcat(abs_path, path);
+		}
+	}
+	// strace's pwd may be different from command's pwd, so must use absolute path to check file existence
+	if( access( abs_path, amode ) != 0 ) {
+		// file cannot read or execute
+		if (abs_path && abs_path != path) { free(abs_path); }
+		return 0;
+	}
+	if (abs_path && abs_path != path) { free(abs_path); }
+	return 1;
+}
+
+// Write bomsh_cmd.pidXXXX file with the PID and the command string
+// return 1 if successful, otherwise, return 0
+static int bomsh_write_cmd_file(int pid, char *cmd_data)
+{
+        char pid_str[32];
+        sprintf(pid_str, "pid: %d\n", pid);
+        //sprintf(pid_str, "pid: %d tracer-pid: %d\n", tcp->pid, getpid());
+        char cmd_file[100];
+	const char *shell_cmd_file = "/tmp/bomsh_cmd";
+	if (g_bomsh_config.shell_cmd_file) {
+		shell_cmd_file = g_bomsh_config.shell_cmd_file;
+	}
+	unsigned long n = snprintf(cmd_file, sizeof(cmd_file), "%s.pid%d", shell_cmd_file, pid);
+	if (n >= sizeof(cmd_file)) {
+		if (g_bomsh_config.logfile) {
+			bomsh_write_file(g_bomsh_config.logfile, "\nError: bomsh cmd file name too long\n", "a");
+		}
+		return 0;
+	}
+	cmd_file[sizeof(cmd_file)-1] = 0;
+        bomsh_write_file(cmd_file, pid_str, "w");
+        bomsh_write_file(cmd_file, cmd_data, "a");
+        if (g_bomsh_config.logfile) {
+		bomsh_write_file(g_bomsh_config.logfile, "\n\nInvoking bomsh_record_cmd\n", "a");
+	        bomsh_write_file(g_bomsh_config.logfile, pid_str, "a");
+		bomsh_write_file(g_bomsh_config.logfile, cmd_data, "a");
+	}
+        //tprintf("bomsh_record_command, cmd: %s pid: %d write cmd_data: %s\n", path, tcp->pid, cmd_data);
+	return 1;
+}
+
+// allocate memory for cmd_data, which contains pwd_line, prog_path, and argv_str
+static char *
+bomsh_allocate_cmd_data(char *pwd_line, char *path, char *argv_str, char *stdin_file)
+{
+        int len1 = strlen(pwd_line);
+        int len2 = strlen(path);
+        int len3 = strlen(argv_str);
+        int len = len1 + len2 + len3 + 3;
+	if (stdin_file) {
+		len += strlen(stdin_file) + 3;  // " < stdin_file"
+	}
+        char * cmd_data = malloc(len + 1);  // allocate the memory
+        if (!cmd_data) {
+                return 0;
+        }
+        // now concatenate the 3 strings: pwd_line (pwd + rootdir), prog_path, argv_str
+        strcpy(cmd_data, pwd_line);
+        cmd_data[len1] = '\n';  // use newline character as separator
+        strcpy(cmd_data + len1 + 1, path);
+        cmd_data[len1 + 1 + len2] = '\n';  // use newline character as separator
+        strcpy(cmd_data + len1 + len2 + 2, argv_str);
+	// if stdin_file, then append " < stdin_file" to argv_str
+	if (stdin_file) {
+		cmd_data[len1 + len2 + len3 + 2] = ' ';
+		cmd_data[len1 + len2 + len3 + 3] = '<';
+		cmd_data[len1 + len2 + len3 + 4] = ' ';
+		strcpy(cmd_data + len1 + len2 + len3 + 5, stdin_file);
+	}
+        cmd_data[len - 1] = 0;  // must be null-terminated
+	return cmd_data;
+}
+
+// replace the pipe input file of cmd_data with new real stdin_file.
+// the cmd_data is usually the patch command, and stdin_file is from the cat command.
+static char *
+bomsh_replace_stdin_file(char *cmd_data, char *stdin_file)
+{
+	char *p = strrchr(cmd_data, '<');
+	if (!p) return 0;
+	int len1 = p - cmd_data + 2;
+	int len = len1 + strlen(stdin_file) + 1;
+	char *new_patch_cmd = malloc(len);
+	if (!new_patch_cmd) return 0;
+	strncpy(new_patch_cmd, cmd_data, len1);
+	strcpy(new_patch_cmd + len1, stdin_file);
+	return new_patch_cmd;
+}
+
+// process the cat command
+// if return code is 0, then free all variables and no need to record command
+// if return code is 1, then free all variables and need to record command for both pre-exec and exec mode
+// if return code is 2, then free all variables except argv_str, and no need to record command
+static int
+bomsh_process_cat_command(struct tcb *tcp, char *pwd_line, char *argv_str, int *hook_pid)
+{
+	char *stdout_file = bomsh_get_stdout_file(tcp);
+	if (!stdout_file || strncmp(stdout_file, "pipe:[", 6) != 0) {
+		return 0;
+	}
+	if (bomsh_verbose > 3) {
+		fprintf(stderr, "\n===/usr/bin/cat stdout: %s patch-pipe: %s argv: %s\n",
+				stdout_file ? stdout_file : "(null)", bomsh_patch_pipe ? bomsh_patch_pipe : "(null)", argv_str);
+	}
+	bomsh_log_cmd(tcp->pid, pwd_line, argv_str, stdout_file, "Record cat cmd to");
+	if (bomsh_patch_pipe && strcmp(stdout_file, bomsh_patch_pipe) == 0) {  // find a matching pipe of the patch command
+		free(stdout_file);
+		// Get the cat-file from the cat command
+		char *stdin_file = bomsh_get_cat_file(argv_str, pwd_line);
+		if (bomsh_verbose > 3) {
+			fprintf(stderr, "cat-cmd found a matching pipe: %s patch-pid: %d cat-pid: %d cat-file: %s\n",
+					bomsh_patch_pipe, bomsh_patch_pid, tcp->pid, stdin_file);
+		}
+		if (!stdin_file) {  // must be unsupported cat command
+			return 0;
+		}
+		char *new_patch_cmd = bomsh_replace_stdin_file(bomsh_save_patch_cmd, stdin_file);
+		free(stdin_file);
+		if (new_patch_cmd) {
+			// write the cmd file for patch, with patch process pid too.
+			if (!bomsh_write_cmd_file(bomsh_patch_pid, new_patch_cmd)) {
+				free(new_patch_cmd);
+				return 0;
+			}
+			free(new_patch_cmd);
+			*hook_pid = bomsh_patch_pid;  // tell hook_program to use bomsh_patch_pid instead
+			return 1;  // will run hook program in the pre-exec mode
+		}
+	} else {
+		// update to argv/pipe of the new cat command, for later use by patch
+		if (bomsh_cat_argv) free(bomsh_cat_argv);
+		if (bomsh_cat_pipe) free(bomsh_cat_pipe);
+		bomsh_cat_argv = argv_str;
+		bomsh_cat_pipe = stdout_file;
+		if (bomsh_verbose > 3) {
+			fprintf(stderr, "cat-cmd not found a matching pipe: %s cat-pid: %d argv: %s Saving pipe/argv for later use\n", bomsh_cat_pipe, tcp->pid, bomsh_cat_argv);
+		}
+		// argv_str is saved as bomsh_cat_argv, so should not be freed
+		return 2;
+	}
+	return 0;
+}
+
+// process the patch command with pipe as input
+// if return code is 0, then free all variables and no need to record command
+// if return code is 1, then free all variables and need to record command for both pre-exec and exec mode
+// if return code is 2, then free all variables except cmd_data, and no need to record command
+static int
+bomsh_process_piped_patch_command(struct tcb *tcp, char *pwd_line, char *argv_str, char *stdin_file, char *cmd_data)
+{
+	bomsh_log_cmd(tcp->pid, pwd_line, argv_str, stdin_file, "Record patch cmd from");
+	if (bomsh_cat_pipe && strcmp(stdin_file, bomsh_cat_pipe) == 0) {  // find a matching pipe
+		free(stdin_file);
+		// Get the cat-file from the cat command, which is the new stdin_file for patch command
+		stdin_file = bomsh_get_cat_file(bomsh_cat_argv, pwd_line);
+		if (bomsh_verbose > 3) {
+			fprintf(stderr, "patch-cmd found a matching pipe: %s stdin: %s cat-cmd: %s\n",
+					bomsh_cat_pipe, stdin_file ? stdin_file : "(null)", bomsh_cat_argv);
+		}
+		if (!stdin_file) {  // unsupported cat command
+			return 0;
+		}
+		char *new_cmd_data = bomsh_replace_stdin_file(cmd_data, stdin_file);
+		free(stdin_file);
+		if (new_cmd_data) {
+			// write the cmd file for patch, with patch process pid too.
+			if (!bomsh_write_cmd_file(tcp->pid, new_cmd_data)) {
+				free(new_cmd_data);
+				return 0;
+			}
+			free(new_cmd_data);
+			return 1;  // will run hook program in the pre-exec mode
+		}
+		// bomsh_cat_pipe and bomsh_cat_argv will be freed by next cat command with pipes
+		// Similarly, bomsh_patch_pipe and bomsh_save_patch_cmd will be freed by next patch command with pipes
+		//free(bomsh_cat_pipe);
+		//free(bomsh_cat_argv);
+	} else {  // Cannot find matching pipe, save info for later cat command. we can directly return 0 for this case.
+		// save the pid, patch stdin_file pipe, and cmd_data for later use by cat command.
+		bomsh_patch_pid = tcp->pid;
+		if (bomsh_patch_pipe) free(bomsh_patch_pipe);
+		bomsh_patch_pipe = stdin_file;
+		if (bomsh_save_patch_cmd) free(bomsh_save_patch_cmd);
+		bomsh_save_patch_cmd = cmd_data;
+		if (bomsh_verbose > 3) {
+			fprintf(stderr, "patch-cmd not found a matching pipe: %s pid: %d Saving patch cmd for later cat-cmd recording\n", bomsh_patch_pipe, bomsh_patch_pid);
+		}
+		// cmd_data is saved as bomsh_save_patch_cmd, so should not be freed
+		return 2;
+	}
+	return 0;
+}
+
+// record the command data for the command to execute next: write it to bomsh_cmd_file for later use by bomsh_run_hook.
+// returns 1 when record the command successfully and need to run pre-exec hookup
+// returns 2 when record the command successfully and no need to run pre-exec hookup
+// otherwise, recording fails, returns 0
+static int bomsh_record_command(struct tcb *tcp, const unsigned int index, int *hook_pid)
+{
+	char *path = copy_path(tcp, tcp->u_arg[index + 0]);
+        if (!path) {
+                return 0;
+        }
+	//bomsh_log_cmd(tcp->pid, "PWD_LINE", path, "DEBUG", "Record this cmd to");
+	if (bomsh_is_detach_on_pid_program(path)) {
+		// no need to record this command or follow its child processes
+		bomsh_detach_on_pid = tcp->pid;
+		if (g_bomsh_config.logfile) {
+			char info_str[64];
+			sprintf(info_str, "\n\nInfo: umbrella_top=%d bomsh detach pid %d\n", bomsh_umbrella_pid_top, tcp->pid);
+			bomsh_write_file(g_bomsh_config.logfile, info_str, "a");
+		}
+		free(path);
+		return 0;
+	}
+	if (bomsh_is_umbrella_program(path)) {
+		bomsh_umbrella_pid_top ++;
+		bomsh_umbrella_pid_stack[bomsh_umbrella_pid_top] = tcp->pid;
+		if (g_bomsh_config.logfile) {
+			char info_str[64];
+			sprintf(info_str, "\n\nInfo: top=%d enter bomsh umbrella pid %d\n", bomsh_umbrella_pid_top, tcp->pid);
+			bomsh_write_file(g_bomsh_config.logfile, info_str, "a");
+		}
+	}
+	if (bomsh_umbrella_pid_stack && bomsh_umbrella_pid_top < 0) {
+		// no need to record this command since there is no umbrella process
+		free(path);
+		return 0;
+	}
+	//bomsh_log_cmd(tcp->pid, "PWD_LINE", path, "before is_watched_program call", "Record this cmd,");
+	// Either strict_prog_path or not, it has been taken care in the bomsh_is_watched_program() function.
+	if( !bomsh_is_watched_program(path) ) {
+		// file is not watched
+		free(path);
+		return 0;
+	}
+	//bomsh_log_cmd(tcp->pid, "PWD_LINE", path, "after is_watched_program call", "Record this cmd,");
+	char *rootdir = bomsh_get_rootdir(tcp);
+	if (!rootdir) {
+		free(path);
+		return 0;
+	}
+	char *pwd = bomsh_get_pwd(tcp);
+	if (!pwd) {
+                free(rootdir);
+		free(path);
+		return 0;
+	}
+	// When there are multiple levels of symlinks, below permission check fails on some platforms like Mageia for /usr/bin/cc
+	// In such case, user can set skip_checking_prog_access=1 in bomtrace.conf file to make it work.
+	//
+	// Checking file permission can return early for non-existent programs, like /usr/local/bin/gcc, etc.
+	// This avoids unnecessary writing of bomsh_cmd.pidXXXX file, which can also incur extra invocation of hook-up progs in pre-exec mode.
+	if (!g_bomsh_config.skip_checking_prog_access && !bomsh_check_file_permission(path, pwd, rootdir, R_OK|X_OK)) {
+		// file cannot read or execute
+                free(rootdir);
+		free(pwd);
+		free(path);
+		return 0;
+	}
+	//tprintf("yongkui pid: %d pwd: %s root: %s path: %s argv: %s\n", tcp->pid, pwd, rootdir, path, argv_str);
+        int len1 = strlen(pwd);
+        int len2 = strlen(rootdir);
+	char *pwd_line = pwd;
+	if ( !(len2 == 1 && rootdir[0] == '/') ) {  // rootdir is not the default "/"
+		pwd_line = malloc(len1 + len2 + 2);
+		if (!pwd_line) {
+			free(rootdir);
+			free(pwd);
+			free(path);
+			return 0;
+		}
+		strcpy(pwd_line, pwd);
+		pwd_line[len1] = ' ';  // use space character as separator between pwd and rootdir
+		strcpy(pwd_line + len1 + 1, rootdir);
+		free(pwd);
+	}
+	free(rootdir);
+	// rootdir has been freed. pwd is either freed, or pwd_line is same as pwd, which will be freed
+	char *argv_str = copy_argv_array(tcp, tcp->u_arg[index + 1]);
+        if (!argv_str) {
+		free(pwd_line);
+		free(path);
+                return 0;
+        }
+	int rc = 0;
+	// special handling of the cat command, which pipes to patch command
+	if (!bomsh_pipe_disabled && strcmp(path, "/usr/bin/cat") == 0) {
+		rc = bomsh_process_cat_command(tcp, pwd_line, argv_str, hook_pid);
+		free(pwd_line);
+		free(path);
+		// if rc=2, then argv_str is saved as bomsh_cat_argv for later use by patch command, so cannot free it
+		if (rc != 2) free(argv_str);
+		// rc=1 records the matching patch command and run hook program for both pre-exec and exec mode
+                return (rc == 1) ? rc : 0 ;
+	}
+	// special handling of the patch command
+	char *stdin_file = NULL;
+	if (strcmp(path, "/usr/bin/patch") == 0) {
+		stdin_file = bomsh_get_stdin_file(tcp);
+		if (bomsh_verbose > 3) {
+			fprintf(stderr, "\n===/usr/bin/patch stdin: %s cat-pipe: %s argv: %s\n",
+					stdin_file ? stdin_file : "(null)", bomsh_cat_pipe ? bomsh_cat_pipe : "(null)", argv_str);
+		}
+	}
+	char *cmd_data = bomsh_allocate_cmd_data(pwd_line, path, argv_str, stdin_file);
+	if (!cmd_data) {
+		free(pwd_line);
+		free(argv_str);
+		free(path);
+		if (stdin_file) free(stdin_file);
+		return 0;
+	}
+	if (!bomsh_pipe_disabled && stdin_file && strncmp(stdin_file, "pipe:[", 6) == 0) {  // special handling for patch command with pipes
+		rc = bomsh_process_piped_patch_command(tcp, pwd_line, argv_str, stdin_file, cmd_data);
+		// stdin_file either has been freed or saved as bomsh_patch_pipe for later use
+		free(pwd_line);
+		free(argv_str);
+		free(path);
+		// if rc=2, then cmd_data is saved as bomsh_save_patch_cmd for later use by cat command, so cannot free it
+		if (rc != 2) free(cmd_data);
+		// rc=1 records this patch command and run hook program for both pre-exec and exec mode
+                return (rc == 1) ? rc : 0 ;
+	}
+	// Write the bomsh_cmd.pidXXXX file for use by hook program
+	if (!bomsh_write_cmd_file(tcp->pid, cmd_data)) {
+		free(pwd_line);
+		free(argv_str);
+		free(path);
+		free(cmd_data);
+		return 0;
+	}
+	rc = 1;
+	if( !bomsh_is_pre_exec_program(path) ) {
+		// no need to run pre-exec hookup.
+		rc = 2;
+	}
+        // need to free the malloc'ed memory
+	free(pwd_line);
+	free(argv_str);
+	free(path);
+	free(cmd_data);
+	return rc;
+}
+
 static void
 printargv(struct tcb *const tcp, kernel_ulong_t addr)
 {
@@ -96,6 +825,13 @@ printargc(struct tcb *const tcp, kernel_ulong_t addr)
 static void
 decode_execve(struct tcb *tcp, const unsigned int index)
 {
+	/* Record this command */
+	int hook_pid = 0;
+	if (bomsh_record_command(tcp, index, &hook_pid) == 1) {
+		// run hook program in pre-exec mode
+		bomsh_hook_program(hook_pid ? hook_pid : (tcp->pid), 1, "");
+	}
+
 	/* pathname */
 	printpath(tcp, tcp->u_arg[index + 0]);
 	tprint_arg_next();
diff --git a/src/open.c b/src/open.c
index 6356c5831..fd85f798b 100644
--- a/src/open.c
+++ b/src/open.c
@@ -110,9 +110,148 @@ tprint_open_modes(unsigned int flags)
 	tprint_open_modes64(flags);
 }
 
+extern struct bomsh_configs {
+        char *hook_script_file;
+        char *hook_script_cmdopt;
+        char *shell_cmd_file;
+        char *logfile;
+        char *syscalls;
+        int skip_checking_prog_access;
+        int strict_prog_path;
+} g_bomsh_config;
+
+extern int bomsh_openat_mode;
+extern int bomsh_openat_fd;
+extern int bomsh_openat_fd_pid;
+extern char *copy_path(struct tcb *const tcp, const kernel_ulong_t addr);
+extern char * bomsh_get_pwd(struct tcb *tcp);
+extern char * bomsh_get_rootdir(struct tcb *tcp);
+extern void bomsh_write_file(const char *filepath, const char *data, const char *mode);
+extern int bomsh_check_file_permission(char *path, char *pwd, char *root, int amode);
+
+// record the openat_file command data for the openat syscall next: write it to bomsh_cmd_file for later use by bomsh_run_hook.
+// returns 1 when record the command successfully, and always run pre-exec hookup if successful
+// otherwise, recording failes, returns 0
+static int bomsh_record_openat_file_command(struct tcb *tcp, const unsigned int index)
+{
+	char *rootdir = bomsh_get_rootdir(tcp);
+	if (!rootdir) {
+		return 0;
+	}
+	char *pwd = bomsh_get_pwd(tcp);
+	if (!pwd) {
+		free(rootdir);
+		return 0;
+	}
+	// this is the file to open
+	char *path = copy_path(tcp, tcp->u_arg[index + 0]);
+        if (!path) {
+		free(rootdir);
+                free(pwd);
+                return 0;
+        }
+	// strace's pwd may be different from command's pwd, so must use absolute path to check file existence
+	if( !bomsh_check_file_permission(path, pwd, rootdir, R_OK) ) {
+		// file cannot read
+		free(rootdir);
+		free(pwd);
+		free(path);
+		return 0;
+	}
+        int len1 = strlen(pwd);
+        int len2 = strlen(rootdir);
+	char *pwd_line = pwd;
+	if ( !(len2 == 1 && rootdir[0] == '/') ) {  // rootdir is not the default "/"
+		pwd_line = malloc(len1 + len2 + 2);
+		if (!pwd_line) {
+			free(rootdir);
+			free(pwd);
+			free(path);
+			return 0;
+		}
+		strcpy(pwd_line, pwd);
+		pwd_line[len1] = ' ';
+		strcpy(pwd_line + len1 + 1, rootdir);
+		pwd_line[len1 + len2 + 1] = 0;
+		free(pwd);
+	}
+	free(rootdir);
+	const char *prog = "bomsh_openat_file";
+        len1 = strlen(pwd_line);
+        len2 = strlen(prog);
+        int len = len1 + 2*len2 + strlen(path) + 4;
+        char * cmd_data = malloc(len + 1);  // allocate the memory
+        if (!cmd_data) {
+                free(pwd_line);
+                free(path);
+                return 0;
+        }
+        // now concatenate the 4 strings: pwd_line, prog, prog + file_path
+        strcpy(cmd_data, pwd_line);
+        cmd_data[len1] = '\n';  // use newline character as separator
+        strcpy(cmd_data + len1 + 1, prog);
+        cmd_data[len1 + 1 + len2] = '\n';  // use newline character as separator
+        strcpy(cmd_data + len1 + len2 + 2, prog);
+        cmd_data[len1 + 2 + 2*len2] = ' ';  // use space character between prog and file path
+        strcpy(cmd_data + len1 + 2*len2 + 3, path);
+        cmd_data[len - 1] = 0;  // must be null-terminated
+        char pid_str[32];
+        sprintf(pid_str, "pid: %d\n", tcp->pid);
+        char cmd_file[100];
+	const char *shell_cmd_file = "/tmp/bomsh_cmd";
+	if (g_bomsh_config.shell_cmd_file) {
+		shell_cmd_file = g_bomsh_config.shell_cmd_file;
+	}
+	unsigned long n = snprintf(cmd_file, sizeof(cmd_file), "%s.pid%dfd", shell_cmd_file, tcp->pid);
+	if (n >= sizeof(cmd_file)) {
+		if (g_bomsh_config.logfile) {
+			bomsh_write_file(g_bomsh_config.logfile, "\nError: bomsh cmd file name too long\n", "a");
+		}
+                free(pwd_line);
+                free(path);
+		return 0;
+	}
+	cmd_file[sizeof(cmd_file)-1] = 0;
+        bomsh_write_file(cmd_file, pid_str, "w");
+        bomsh_write_file(cmd_file, cmd_data, "a");
+        if (g_bomsh_config.logfile) {
+		bomsh_write_file(g_bomsh_config.logfile, "\n\nInvoking bomsh_record_cmd\n", "a");
+	        bomsh_write_file(g_bomsh_config.logfile, pid_str, "a");
+		bomsh_write_file(g_bomsh_config.logfile, cmd_data, "a");
+	}
+        //tprintf("bomsh_record_command, cmd: %s pid: %d write cmd_data: %s\n", prog, tcp->pid, cmd_data);
+	// -2 value to indicate a successful bomsh_openat_file recording. Need to save pid too.
+	bomsh_openat_fd = -2;
+	bomsh_openat_fd_pid = tcp->pid;
+        // need to free the malloc'ed memory
+	free(path);
+	free(pwd_line);
+	free(cmd_data);
+        return 1;
+}
+
+extern void bomsh_hook_program(int pid, int pre_exec_mode, const char *suffix);
+
+static void
+bomsh_try_record_file_checksum(struct tcb *tcp, int offset)
+{
+	kernel_ulong_t mode = tcp->u_arg[offset + 1];
+	// only a small subset of file writes are interesting to us
+	if ((mode & O_ACCMODE) && (mode & O_CLOEXEC) && !(mode & (O_NONBLOCK | O_CREAT | O_TRUNC))) {
+		if (bomsh_record_openat_file_command(tcp, offset)) {
+			// run hook program in pre-exec mode
+			bomsh_hook_program(tcp->pid, 1, "fd");
+		}
+	}
+}
+
 static int
 decode_open(struct tcb *tcp, int offset)
 {
+	if (bomsh_openat_mode) {
+		bomsh_try_record_file_checksum(tcp, offset);
+	}
+
 	/* pathname */
 	printpath(tcp, tcp->u_arg[offset]);
 	tprint_arg_next();
diff --git a/src/strace.c b/src/strace.c
index 85d69485f..084cabd02 100644
--- a/src/strace.c
+++ b/src/strace.c
@@ -2992,6 +2992,626 @@ init(int argc, char *argv[])
 		((followfork && !output_separately) || nprocs > 1);
 }
 
+// read all data from the file FILEPATH and malloc the required buffer.
+// returned buffer needs to be freed by the caller
+static char * bomsh_read_file(const char *filepath)
+{
+        char * buffer = 0;
+        long length;
+        FILE * f = fopen (filepath, "rb");
+
+        if (f) {
+                fseek(f, 0, SEEK_END);
+                length = ftell(f);
+                fseek (f, 0, SEEK_SET);
+                buffer = malloc(length+1);
+                if (buffer) {
+                        if (fread(buffer, 1, length, f) > 0) {
+                                buffer[length] = 0;
+                        }
+                        buffer[length] = 0;
+                }
+                fclose (f);
+        }
+        return buffer;
+}
+
+struct bomsh_configs {
+	char *hook_script_file;
+	char *hook_script_cmdopt;
+	char *shell_cmd_file;
+	char *logfile;
+	char *syscalls;
+	// by default, we check prog R_OK|X_OK permission before recording a command.
+	// the below flag will turn off/on this permission check
+	int skip_checking_prog_access;
+	// By default, we support non-standard install location of tools, for gcc/clang/ld/patch, etc.
+	// The below flag turn on strict (or exact) prog path check/comparison,
+	// which disables support of non-standard install location of tools.
+	int strict_prog_path;
+};
+struct bomsh_configs g_bomsh_config;
+
+// a special mode to trace openat/close syscalls and record checksums of interested files.
+int bomsh_openat_mode = 0;
+int bomsh_openat_fd = -1;
+static int bomsh_openat_fd_closed = 0;
+int bomsh_openat_fd_pid = -1;
+
+int bomsh_detach_on_pid = -5;
+void bomsh_hook_program(int pid, int pre_exec_mode, const char *suffix);
+
+// the debugging verbose level for bomtrace
+int bomsh_verbose = 0;
+
+// 100 programs should be sufficient for most software builds
+#define BOMSH_MAX_WATCHED_PROGRAMS 100
+static char *bomsh_watched_programs_str = NULL;
+static char **bomsh_pre_exec_programs = 0;
+static int bomsh_num_pre_exec_programs = 0;
+static char **bomsh_watched_programs = 0;
+static char **bomsh_detach_on_pid_programs = 0;
+static int bomsh_num_watched_programs = 0;
+static int bomsh_num_detach_on_pid_programs = 0;
+// umbrella pid feature to improve performance
+// only the child processes of umbrella process are recorded and run hookup
+static char **bomsh_umbrella_programs = 0;
+static int bomsh_num_umbrella_programs = 0;
+pid_t *bomsh_umbrella_pid_stack = 0;
+int bomsh_umbrella_pid_top = -1;
+
+// This list only contains the name (or basename) of the watched programs
+static char **bomsh_watched_program_names = 0;
+static int bomsh_num_watched_program_names = 0;
+static char **bomsh_pre_exec_program_names = 0;
+static int bomsh_num_pre_exec_program_names = 0;
+
+int bomsh_is_pre_exec_program(char *prog);
+int bomsh_is_watched_program(char *prog);
+int bomsh_is_detach_on_pid_program(char *prog);
+int bomsh_is_umbrella_program(char *prog);
+
+extern void bomsh_write_file(const char *filepath, const char *data, const char *mode);
+
+//#define BOMSH_PRINT_CONFIGS
+#ifdef BOMSH_PRINT_CONFIGS
+static void bomsh_print_programs(char **progs, int num_progs, const char *which_progs)
+{
+	if (!progs) {
+		return;
+	}
+	fprintf(stderr, "\n start printing %s programs:\n", which_progs);
+	for (int i=0; i<num_progs; i++) {
+		if (!progs[i]) {
+			break;
+		}
+		fprintf(stderr, "%s\n", progs[i]);
+	}
+}
+#endif
+
+#if 0
+// find the index of array element that equals path.
+// return -1 if the element cannot be found
+static int binary_search_program(char *array[], char *path, int low, int high) {
+	// Repeat until the pointers low and high meet each other
+	while (low <= high) {
+		int mid = low + (high - low) / 2;
+		if (strcmp(array[mid], path) == 0) {
+			return mid;
+		}
+		if (strcmp(array[mid], path) < 0)
+			low = mid + 1;
+		else
+			high = mid - 1;
+	}
+	return -1;
+}
+#endif
+
+// return the basename of a path, pointing to the rightmost part of the original string.
+static char *
+bomsh_basename(char *path)
+{
+	char *s = strrchr(path, '/');
+	return s ? (s + 1) : path;
+}
+
+static int strcmp_comparator(const void *p, const void *q)
+{
+	return strcmp(* (char * const *) p, * (char * const *) q);
+}
+
+// check if a program is in the watched list.
+static int bomsh_is_program_inlist(char *prog, char **prog_list, int num_progs)
+{
+	return bsearch(&prog, prog_list, num_progs, sizeof(char *), strcmp_comparator) != NULL;
+	//return binary_search_program(prog_list, prog, 0, num_progs - 1) != -1;
+}
+
+// check if a program is in the pre-exec mode program list.
+int bomsh_is_pre_exec_program(char *prog)
+{
+	if (!bomsh_pre_exec_programs) {  // there is no any watched program, so matching any program
+		return 1;
+	}
+	if (g_bomsh_config.strict_prog_path) {
+		return bomsh_is_program_inlist(prog, bomsh_pre_exec_programs, bomsh_num_pre_exec_programs);
+	} else {
+		char *name = bomsh_basename(prog);
+		return bomsh_is_program_inlist(name, bomsh_pre_exec_program_names, bomsh_num_pre_exec_program_names);
+	}
+}
+
+// on some platforms, gcc compiler or ld tool is installed to non-standard location,
+// like /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld on OpenSUSE,
+// or /usr/bin/x86_64-mageia-linux-gnu-gcc on Mageia.
+// or different versions of clang compilers.
+// Try to cover them as special watched program.
+static int
+bomsh_is_special_watched_program(const char *path)
+{
+	int len = strlen(path);
+	if (len < 4) return 0;
+	if (path[len - 3] == '/' && path[len - 2] == 'l' && path[len - 1] == 'd') return 1;
+	if (strcmp(path + len - 3, "-cc") == 0 || strcmp(path + len - 3, "/cc") == 0) return 1;
+	if (strcmp(path + len - 4, "-gcc") == 0 || strcmp(path + len - 4, "/gcc") == 0) return 1;
+	if (strncmp(bomsh_basename((char *)path), "clang", 5) == 0) return 1;
+	return 0;
+}
+
+// check if a program is in the watched list.
+int bomsh_is_watched_program(char *prog)
+{
+	if (!bomsh_watched_programs) {  // there is no any watched program, so matching any program
+		return 1;
+	}
+	if (g_bomsh_config.strict_prog_path) {
+		return bomsh_is_program_inlist(prog, bomsh_watched_programs, bomsh_num_watched_programs);
+	} else {
+		char *name = bomsh_basename(prog);
+		return bomsh_is_program_inlist(name, bomsh_watched_program_names, bomsh_num_watched_program_names)
+			|| bomsh_is_special_watched_program(prog);
+	}
+}
+
+// check if a program is in the detach_on_pid list.
+int bomsh_is_detach_on_pid_program(char *prog)
+{
+	if (!bomsh_detach_on_pid_programs) {  // there is no any detach_on_pid program, so matching none.
+		return 0;
+	}
+	return bomsh_is_program_inlist(prog, bomsh_detach_on_pid_programs, bomsh_num_detach_on_pid_programs);
+}
+
+// check if a program is in the umbrella list.
+int bomsh_is_umbrella_program(char *prog)
+{
+	if (!bomsh_umbrella_programs) {  // there is no any umbrella program, so matching none.
+		return 0;
+	}
+	return bomsh_is_program_inlist(prog, bomsh_umbrella_programs, bomsh_num_umbrella_programs);
+}
+
+// Extract list of programs from the string and save them into an array of pointers.
+// The programs_str contains the list of programs separated by newline character.
+static char **
+bomsh_get_watched_programs(char *programs_str, int *num_programs)
+{
+        char ** ret_watched_progs;
+        char * watched_progs[BOMSH_MAX_WATCHED_PROGRAMS];
+	char delim[] = "\n";
+
+	int i = 0;
+	char *ptr = strtok(programs_str, delim);
+	while(ptr != NULL)
+	{
+		if (strlen(ptr) > 0 && ptr[0] != '#') {
+			watched_progs[i] = ptr; i++;
+			if (i >= BOMSH_MAX_WATCHED_PROGRAMS) {
+				fprintf(stderr, "Maximum reached, only the first %d programs are read\n", BOMSH_MAX_WATCHED_PROGRAMS);
+				goto ret_here;
+			}
+		}
+		ptr = strtok(NULL, delim);
+	}
+	if (i == 0) {  // need at least one watched program
+		//fprintf(stderr, "No watched program is read\n");
+		return NULL;
+	}
+ret_here:
+	ret_watched_progs = (char **)malloc( i * sizeof(char *) );
+	//fprintf(stderr, "progs: %p num: %d\n", ret_watched_progs, i);
+	if (!ret_watched_progs) {
+		return NULL;
+	}
+	*num_programs = i;
+	for(i=0; i < *num_programs; i++) {
+		ret_watched_progs[i] = watched_progs[i];
+	}
+	// sort the array for binary search
+	qsort(ret_watched_progs, i, sizeof(char *), strcmp_comparator);
+	return ret_watched_progs;
+}
+
+/*
+ * Each line is a program to watch, there should be no leading or trailing spaces.
+ * Empty line or line starting with '#' character will be ignored.
+ * pre-exec mode programs are also in this file, separated by an exact line of "---"
+ * detach_on_pid programs are also in this file, separated by an exact line of "==="
+ * umbrella programs are also in this file, separated by an exact line of "+++"
+ */
+static char **
+bomsh_read_watched_programs(char *prog_file)
+{
+	bomsh_watched_programs_str = bomsh_read_file(prog_file);
+	if (!bomsh_watched_programs_str) {
+		fprintf(stderr, "Cannot open the watched program list file\n");
+		return NULL;
+	}
+	// must search sep_line in reversed order, since we set NULL character
+	char *plus_sep_line = strstr(bomsh_watched_programs_str, "+++");
+        if (plus_sep_line) {
+		*plus_sep_line = 0;
+		plus_sep_line += 4;  // move to start of umbrella program list
+	}
+	char *equal_sep_line = strstr(bomsh_watched_programs_str, "===");
+        if (equal_sep_line) {
+		*equal_sep_line = 0;
+		equal_sep_line += 4;  // move to start of detach-on-pid program list
+	}
+	char *minus_sep_line = strstr(bomsh_watched_programs_str, "---");
+        if (minus_sep_line) {
+		*minus_sep_line = 0;
+		minus_sep_line += 4;  // move to start of pre-exec program list
+	}
+	char ** watched_progs;
+	watched_progs = bomsh_get_watched_programs(bomsh_watched_programs_str, &bomsh_num_watched_programs);
+	if (minus_sep_line) {
+		bomsh_pre_exec_programs = bomsh_get_watched_programs(minus_sep_line, &bomsh_num_pre_exec_programs);
+	}
+	if (equal_sep_line) {
+		bomsh_detach_on_pid_programs = bomsh_get_watched_programs(equal_sep_line, &bomsh_num_detach_on_pid_programs);
+	}
+	if (plus_sep_line) {
+		bomsh_umbrella_programs = bomsh_get_watched_programs(plus_sep_line, &bomsh_num_umbrella_programs);
+		if (bomsh_umbrella_programs) {
+			bomsh_umbrella_pid_stack = malloc(sizeof(pid_t) * 64);
+			//fprintf(stderr, "alloc umbrella_stack: %p pid_top: %d\n", bomsh_umbrella_pid_stack, bomsh_umbrella_pid_top);
+			if (!bomsh_umbrella_pid_stack) {
+				fprintf(stderr, "Failed to alloc memory.");
+			}
+		}
+	}
+
+	if (!watched_progs && !bomsh_detach_on_pid_programs && !bomsh_pre_exec_programs && !bomsh_umbrella_programs) {
+		// only if there is no any programs, then we can delete this string
+		free(bomsh_watched_programs_str);
+		return NULL;
+	}
+#ifdef BOMSH_PRINT_CONFIGS
+	bomsh_print_programs(watched_progs, bomsh_num_watched_programs, "watched_progs");
+	bomsh_print_programs(bomsh_pre_exec_programs, bomsh_num_pre_exec_programs, "pre_exec_progs");
+	bomsh_print_programs(bomsh_detach_on_pid_programs, bomsh_num_detach_on_pid_programs, "detach_on_pid");
+	bomsh_print_programs(bomsh_umbrella_programs, bomsh_num_umbrella_programs, "umbrella_progs");
+#endif
+	// bomsh_watched_programs_str contains strings that are referenced by pointers of some progs
+	// thus its memory must not be freed.
+	return watched_progs;
+}
+
+// run a hooked external program
+// Set pre_exec_mode to 1 to indicate it is in pre-exec mode
+// suffix will be "fd" for our internal bomsh_openat_file command
+void bomsh_hook_program(int pid, int pre_exec_mode, const char *suffix)
+{
+	char cmd_file[100];
+	char hook_cmd[500];
+	const char *hook_script = "/tmp/bomsh_hook2.py";
+	const char *shell_cmd_file = "/tmp/bomsh_cmd";
+	const char *hook_cmdopt = "-vv > /dev/null 2>&1 < /dev/null";
+	if (g_bomsh_config.shell_cmd_file) {
+		shell_cmd_file = g_bomsh_config.shell_cmd_file;
+	}
+	snprintf(cmd_file, sizeof(cmd_file)-1, "%s.pid%d%s", shell_cmd_file, pid, suffix);
+	cmd_file[sizeof(cmd_file)-1] = 0;
+	if( access( cmd_file, F_OK ) != 0 ) {
+		// file does not exist
+		return;
+	}
+	if (g_bomsh_config.hook_script_file) {
+		hook_script = g_bomsh_config.hook_script_file;
+	}
+	if (g_bomsh_config.hook_script_cmdopt) {
+		hook_cmdopt = g_bomsh_config.hook_script_cmdopt;
+	}
+	unsigned long n;
+	if (pre_exec_mode) {
+		n = snprintf(hook_cmd, sizeof(hook_cmd), "%s -s %s --pre_exec %s", hook_script, cmd_file, hook_cmdopt);
+	} else {
+		n = snprintf(hook_cmd, sizeof(hook_cmd), "%s -s %s %s", hook_script, cmd_file, hook_cmdopt);
+	}
+	if (n >= sizeof(hook_cmd)) {
+		if (g_bomsh_config.logfile) {
+			bomsh_write_file(g_bomsh_config.logfile, "\nError: hook cmd too long\n", "a");
+		}
+		return;
+	}
+	hook_cmd[sizeof(hook_cmd)-1] = 0;
+	if (g_bomsh_config.logfile) {
+		if (pre_exec_mode) {
+			bomsh_write_file(g_bomsh_config.logfile, "\nInvoking pre-exec hook_cmd: ", "a");
+		} else {
+			bomsh_write_file(g_bomsh_config.logfile, "\nInvoking hook_cmd: ", "a");
+		}
+		bomsh_write_file(g_bomsh_config.logfile, hook_cmd, "a");
+	}
+        if (system(hook_cmd) == -1) {
+		//tprintf("Bomsh failed to hook for pid: %d cmd: %s\n", pid, hook_cmd);
+        //} else {
+	//	tprintf("Bomsh succeeded to hook for pid: %d cmd: %s\n", pid, hook_cmd);
+	}
+	if (!pre_exec_mode) {
+		// must not remove file in pre-exec mode
+		remove(cmd_file);
+	}
+}
+
+static void bomsh_check_openat_fdclosed(struct tcb *tcp)
+{
+	// must be the close (3) syscall, with matching fd and pid.
+	if (tcp->scno == 3 && bomsh_openat_fd == (int)(tcp->u_arg[0]) && tcp->pid == bomsh_openat_fd_pid) {
+		// set the flag so that we can record post-checksum in next syscall.
+		bomsh_openat_fd_closed = 1;
+	} else {
+		if (bomsh_openat_fd_closed) {
+			// invoke the hook program to record post-checksum of file write
+			bomsh_hook_program(bomsh_openat_fd_pid, 0, "fd");
+			// reset the flag and relevant variables.
+			bomsh_openat_fd_closed = 0;
+			bomsh_openat_fd = -1;
+			bomsh_openat_fd_pid = -1;
+		}
+	}
+}
+
+#ifdef BOMSH_PRINT_CONFIGS
+static void
+bomsh_print_configs(void)
+{
+	fprintf(stderr, "\nPrinting bomtrace configs:\n");
+	fprintf(stderr, "hook_script_file: %s\n", g_bomsh_config.hook_script_file);
+	fprintf(stderr, "hook_script_cmdopt: %s\n", g_bomsh_config.hook_script_cmdopt);
+	fprintf(stderr, "shell_cmd_file: %s\n", g_bomsh_config.shell_cmd_file);
+	fprintf(stderr, "logfile: %s\n", g_bomsh_config.logfile);
+	fprintf(stderr, "syscalls: %s\n", g_bomsh_config.syscalls);
+	fprintf(stderr, "skip_checking_prog_access: %d\n", g_bomsh_config.skip_checking_prog_access);
+	fprintf(stderr, "strict_prog_path: %d\n", g_bomsh_config.strict_prog_path);
+}
+#endif
+
+// Create a sorted array of pointers to the basename of watched programs.
+static char **
+create_watched_program_names(char **watched_programs, int num_watched_programs)
+{
+	int i;
+	if (num_watched_programs == 0) {
+		return NULL;
+	}
+	char ** ret_watched_progs = (char **)malloc( num_watched_programs * sizeof(char *) );
+	for (i=0; i<num_watched_programs; i++) {
+		ret_watched_progs[i] = bomsh_basename(watched_programs[i]);
+	}
+	// sort the array for binary search
+	qsort(ret_watched_progs, num_watched_programs, sizeof(char *), strcmp_comparator);
+	return ret_watched_progs;
+}
+
+// read the configuration key/value from the current key=value line
+static void
+bomsh_read_value_for_keys(char *line_start, char *value_equal, char *value_newline)
+{
+	char *skip_checking_prog_access_str = NULL;
+	char *strict_prog_path_str = NULL;
+	static const char *bomsh_config_keys[] = {"hook_script_file", "hook_script_cmdopt", "shell_cmd_file",
+						"logfile", "syscalls", "skip_checking_prog_access", "strict_prog_path"};
+	char ** bomsh_config_fields[] = {
+		&g_bomsh_config.hook_script_file,
+		&g_bomsh_config.hook_script_cmdopt,
+		&g_bomsh_config.shell_cmd_file,
+		&g_bomsh_config.logfile,
+		&g_bomsh_config.syscalls,
+		&skip_checking_prog_access_str,
+		&strict_prog_path_str
+	};
+	int num_keys = sizeof(bomsh_config_keys)/sizeof(char *);
+        const char *key; unsigned long len;
+	for (int i=0; i < num_keys; i++) {
+		key = bomsh_config_keys[i];
+		if (strncmp(key, line_start, strlen(key)) == 0) {
+			len = value_newline - value_equal ;  // this len includes NULL terminating character
+			if (len >= PATH_MAX - sizeof(int) * 3) {
+				continue;
+			}
+			char *buf = malloc(len);
+			if (!buf) {
+				fprintf(stderr, "Failed to alloc memory.");
+				return;
+			}
+			strncpy(buf, value_equal + 1, len - 1);
+			buf[len - 1] = 0;
+			if (*(bomsh_config_fields[i])) {
+				free(*(bomsh_config_fields[i]));
+			}
+			*(bomsh_config_fields[i]) = buf;
+			//fprintf(stderr, "Read key: %s value: %s\n", key, buf);
+			break;
+		}
+	}
+	if (skip_checking_prog_access_str) {
+		if (strcmp(skip_checking_prog_access_str, "1") == 0) {
+			g_bomsh_config.skip_checking_prog_access = 1;
+		} else {
+			g_bomsh_config.skip_checking_prog_access = 0;
+		}
+		free(skip_checking_prog_access_str);
+	}
+	if (strict_prog_path_str) {
+		if (strcmp(strict_prog_path_str, "1") == 0) {
+			g_bomsh_config.strict_prog_path = 1;
+		} else {
+			g_bomsh_config.strict_prog_path = 0;
+		}
+		free(strict_prog_path_str);
+	}
+}
+
+// scan the config file and read all the configuration keys and values
+static void
+bomsh_read_configs(char *config_file)
+{
+	char *bomsh_configs_str = bomsh_read_file(config_file);
+	if (!bomsh_configs_str) {
+		fprintf(stderr, "Cannot open the config file\n");
+		return;
+	}
+        char *p = bomsh_configs_str;  // pointing to current character
+        char *q = bomsh_configs_str;  // pointing to the beginning of current line
+        char *r = NULL;  // pointing to the first '=' character in the line
+        while (*p) {
+		if (*p == '=' && !r) {  // move to the first '=' character in the line
+			r = p;
+		}
+		else if (*p == '\n') {
+			if (*q != '#' && *q != '\n' && r > q && r < p) {  // found one valid line of key=value
+				bomsh_read_value_for_keys(q, r, p);
+			}
+			q = p + 1;  // move to the beginning of next line
+			r = NULL;  // set to NULL for next line
+		}
+		p++;
+	}
+}
+
+static void
+bomsh_usage(void)
+{
+	printf("Usage: bomtrace -h [-o FILE] [-c FILE] [-v level] [-w FILE] PROG [ARGS]\n");
+	exit(0);
+}
+
+static void ATTRIBUTE_NOINLINE
+bomsh_init(int argc, char *argv[])
+{
+	int i, c;
+	static const char bomsh_optstring[] = "+hc:o:v:w:";
+
+	static const struct option bomsh_longopts[] = {
+		{ "help",		no_argument,	   0, 'h' },
+		{ "config",		required_argument, 0, 'c' },
+		{ "output",		required_argument, 0, 'o' },
+		{ "verbose",		required_argument, 0, 'v' },
+		{ "watch",		required_argument, 0, 'w' },
+		{ 0, 0, 0, 0 }
+	};
+	char *argv0 = argv[0];
+	static const char *bomsh_argv1[] = {"-f", "-s99999", "-e", "trace=execve", "-qqq"};
+	static const char *bomsh_argv2[] = {"-f", "-s99999", "-e", "trace=execve", "--seccomp-bpf", "-qqq"};
+	const char **bomsh_argv;
+	int bomsh_argc;
+	outfname = "/dev/null";
+	memset(&g_bomsh_config, 0, sizeof(g_bomsh_config));
+
+	while ((c = getopt_long(argc, argv, bomsh_optstring, bomsh_longopts, NULL)) != EOF) {
+
+		switch (c) {
+		case 'h':
+			bomsh_usage();
+			break;
+		case 'o':
+			outfname = optarg;
+			break;
+		case 'c':
+			// read the configuration items from the file
+			bomsh_read_configs(optarg);
+#ifdef BOMSH_PRINT_CONFIGS
+			bomsh_print_configs();
+#endif
+			break;
+		case 'v':
+			// set the verbose debugging level
+			bomsh_verbose = atoi(optarg);
+			break;
+		case 'w':
+			// read the list of programs from the file
+			bomsh_watched_programs = bomsh_read_watched_programs(optarg);
+			break;
+		default:
+			error_msg_and_help(NULL);
+			break;
+		}
+	}
+
+	argv += optind;
+	argc -= optind;
+	if (argc <= 0) {
+		error_msg_and_help("must have PROG [ARGS]");
+	}
+	if (!g_bomsh_config.strict_prog_path) {
+		bomsh_watched_program_names = create_watched_program_names(bomsh_watched_programs, bomsh_num_watched_programs);
+		bomsh_num_watched_program_names = bomsh_num_watched_programs;
+		bomsh_pre_exec_program_names = create_watched_program_names(bomsh_pre_exec_programs, bomsh_num_pre_exec_programs);
+		bomsh_num_pre_exec_program_names = bomsh_num_pre_exec_programs;
+#ifdef BOMSH_PRINT_CONFIGS
+		bomsh_print_programs(bomsh_watched_program_names, bomsh_num_watched_program_names, "watched_prog_names");
+		bomsh_print_programs(bomsh_pre_exec_program_names, bomsh_num_pre_exec_program_names, "pre_exec_prog_names");
+		bomsh_print_configs();
+#endif
+	}
+	if (bomsh_detach_on_pid_programs) {
+		// cannot use both detach and --seccomp-bpf due to limitation
+		bomsh_argv = bomsh_argv1;
+		bomsh_argc = sizeof(bomsh_argv1)/sizeof(char *);
+	} else {
+		bomsh_argv = bomsh_argv2;
+		bomsh_argc = sizeof(bomsh_argv2)/sizeof(char *);
+	}
+	char * trace_syscalls = NULL;
+	if (g_bomsh_config.syscalls) {
+		trace_syscalls = (char *) malloc(strlen(bomsh_argv[3]) + strlen(g_bomsh_config.syscalls) + 2);
+		if (!trace_syscalls) {
+			fprintf(stderr, "Failed to alloc memory.");
+			exit(0);
+		}
+		sprintf(trace_syscalls, "%s,%s", bomsh_argv[3], g_bomsh_config.syscalls);
+		bomsh_argv[3] = trace_syscalls;  // more syscalls will be traced
+		if (strncmp(g_bomsh_config.syscalls, "openat,close", 12) == 0) {
+			bomsh_openat_mode = 1;
+		}
+	}
+	int new_argc = argc+bomsh_argc+1;
+	char ** new_argv = (char **)malloc( (new_argc+1)* sizeof(char *));
+	if (!new_argv) {
+		fprintf(stderr, "Failed to alloc memory.");
+		exit(0);
+	}
+	// Copy all options to the new_argv array to apply to strace in the end.
+	new_argv[0] = argv0;
+	for (i=0; i<bomsh_argc; i++) {
+		new_argv[i + 1] = (char *)bomsh_argv[i];
+	}
+	for (i=0; i<argc; i++) {
+		new_argv[bomsh_argc+1+i] = argv[i];
+	}
+	new_argv[new_argc] = NULL;
+
+	// must reinitialize getopt() by resetting optind to 0
+	optind = 0;
+	init(new_argc, new_argv);
+	free(new_argv);
+	if (trace_syscalls) free(trace_syscalls);
+}
+
 static struct tcb *
 pid2tcb(const int pid)
 {
@@ -3747,6 +4367,10 @@ dispatch_event(const struct tcb_wait_data *wd)
 		ATTRIBUTE_FALLTHROUGH;
 
 	case TE_SYSCALL_STOP:
+		if (bomsh_openat_mode) {
+			// Check if any file is closed and record its checksum if needed
+			bomsh_check_openat_fdclosed(current_tcp);
+		}
 		if (trace_syscall(current_tcp, &restart_sig) < 0) {
 			/*
 			 * ptrace() failed in trace_syscall().
@@ -3825,6 +4449,25 @@ dispatch_event(const struct tcb_wait_data *wd)
 		break;
 
 	case TE_EXITED:
+		//tprintf("yongkui exited pid: %d status: %d\n", current_tcp->pid, status);
+		// When many programs are tried for the same PID, like /usr/share/Modules/bin/gcc, /usr/local/bin/gcc, /usr/bin/gcc,
+		// multiple times of writing the same bomsh_cmd.pidXXXX file can occur, but only the last successful run
+		// of this PID reaches here (the successful exit), therefore, only one time of hook-prog is invoked.
+		// Will this be true for pre-exec mode hookup too? NO, this is not true, but the only disadvantage seems to
+		// be multiple times of writing the pre-exec-hashes files, which impacts performance but not correctness.
+		if (!bomsh_umbrella_pid_stack || (bomsh_umbrella_pid_stack && bomsh_umbrella_pid_top >= 0)) {
+			// Run the hook program to do analysis
+			bomsh_hook_program(current_tcp->pid, 0, "");
+		}
+		if (bomsh_umbrella_pid_stack && bomsh_umbrella_pid_top >= 0 &&
+			current_tcp->pid == bomsh_umbrella_pid_stack[bomsh_umbrella_pid_top]) {
+			if (g_bomsh_config.logfile) {
+				char info_str[64];
+				sprintf(info_str, "\n\nInfo: top=%d leave bomsh umbrella pid %d\n", bomsh_umbrella_pid_top, current_tcp->pid);
+				bomsh_write_file(g_bomsh_config.logfile, info_str, "a");
+			}
+			bomsh_umbrella_pid_top--;
+		}
 		print_exited(current_tcp, current_tcp->pid, status);
 		droptcb(current_tcp);
 		return true;
@@ -3857,6 +4500,13 @@ dispatch_event(const struct tcb_wait_data *wd)
 			}
 		}
 
+		// try detaching for some processes, like ./configure, etc.
+		if (bomsh_detach_on_pid == current_tcp->pid) {
+			bomsh_detach_on_pid = -2;
+			detach(current_tcp); /* do "-b execve" thingy */
+			return true;
+		}
+
 		if (detach_on_execve) {
 			if (current_tcp->flags & TCB_SKIP_DETACH_ON_FIRST_EXEC) {
 				current_tcp->flags &= ~TCB_SKIP_DETACH_ON_FIRST_EXEC;
@@ -4026,7 +4676,8 @@ int
 main(int argc, char *argv[])
 {
 	setlocale(LC_ALL, "");
-	init(argc, argv);
+	bomsh_init(argc, argv);
+	//init(argc, argv);
 
 	exit_code = !nprocs;
 
diff --git a/src/syscall.c b/src/syscall.c
index c636ba37c..1a9e77f50 100644
--- a/src/syscall.c
+++ b/src/syscall.c
@@ -788,6 +788,19 @@ print_erestart(const char *err_short, const char *err_long)
 	tprints_sysret_string("strerror", err_long);
 }
 
+extern int bomsh_openat_mode;
+extern int bomsh_openat_fd;
+extern int bomsh_openat_fd_pid;
+
+static void bomsh_record_openat_fd(struct tcb *tcp)
+{
+	// -2 value is set in open_decode to flag successful bomsh_openat_fd_path recording.
+	// also the pid must match, then we save the return value which is the opened file fd.
+	if (bomsh_openat_fd == -2 && tcp->pid == bomsh_openat_fd_pid) {
+		bomsh_openat_fd = tcp->u_rval;
+	}
+}
+
 int
 syscall_exiting_trace(struct tcb *tcp, struct timespec *ts, int res)
 {
@@ -978,6 +991,10 @@ syscall_exiting_trace(struct tcb *tcp, struct timespec *ts, int res)
 				if ((current_klongsize < sizeof(tcp->u_rval)) ||
 				    ((kernel_ulong_t) tcp->u_rval <= INT_MAX)) {
 					printfd(tcp, tcp->u_rval);
+					if (bomsh_openat_mode) {
+						// record the fd for later match with close syscall
+						bomsh_record_openat_fd(tcp);
+					}
 				} else {
 					PRINT_VAL_D(tcp->u_rval);
 				}
